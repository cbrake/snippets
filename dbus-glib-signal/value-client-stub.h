/* Generated by dbus-binding-tool; do not edit! */

#include <glib/gtypes.h>
#include <glib/gerror.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_maemo_Value
#define DBUS_GLIB_CLIENT_WRAPPERS_org_maemo_Value

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_Value_getvalue1 (DBusGProxy *proxy, gint* OUT_cur_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "getvalue1", error, G_TYPE_INVALID, G_TYPE_INT, OUT_cur_value, G_TYPE_INVALID);
}

typedef void (*org_maemo_Value_getvalue1_reply) (DBusGProxy *proxy, gint OUT_cur_value, GError *error, gpointer userdata);

static void
org_maemo_Value_getvalue1_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_cur_value;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_cur_value, G_TYPE_INVALID);
  (*(org_maemo_Value_getvalue1_reply)data->cb) (proxy, OUT_cur_value, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_Value_getvalue1_async (DBusGProxy *proxy, org_maemo_Value_getvalue1_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getvalue1", org_maemo_Value_getvalue1_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_Value_getvalue2 (DBusGProxy *proxy, gdouble* OUT_cur_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "getvalue2", error, G_TYPE_INVALID, G_TYPE_DOUBLE, OUT_cur_value, G_TYPE_INVALID);
}

typedef void (*org_maemo_Value_getvalue2_reply) (DBusGProxy *proxy, gdouble OUT_cur_value, GError *error, gpointer userdata);

static void
org_maemo_Value_getvalue2_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gdouble OUT_cur_value;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_DOUBLE, &OUT_cur_value, G_TYPE_INVALID);
  (*(org_maemo_Value_getvalue2_reply)data->cb) (proxy, OUT_cur_value, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_Value_getvalue2_async (DBusGProxy *proxy, org_maemo_Value_getvalue2_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getvalue2", org_maemo_Value_getvalue2_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_Value_setvalue1 (DBusGProxy *proxy, const gint IN_new_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "setvalue1", error, G_TYPE_INT, IN_new_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_maemo_Value_setvalue1_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_Value_setvalue1_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_Value_setvalue1_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_Value_setvalue1_async (DBusGProxy *proxy, const gint IN_new_value, org_maemo_Value_setvalue1_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setvalue1", org_maemo_Value_setvalue1_async_callback, stuff, g_free, G_TYPE_INT, IN_new_value, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_maemo_Value_setvalue2 (DBusGProxy *proxy, const gdouble IN_new_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "setvalue2", error, G_TYPE_DOUBLE, IN_new_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_maemo_Value_setvalue2_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_maemo_Value_setvalue2_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_maemo_Value_setvalue2_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_maemo_Value_setvalue2_async (DBusGProxy *proxy, const gdouble IN_new_value, org_maemo_Value_setvalue2_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setvalue2", org_maemo_Value_setvalue2_async_callback, stuff, g_free, G_TYPE_DOUBLE, IN_new_value, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_maemo_Value */

G_END_DECLS
